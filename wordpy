#! python

from argparse import ArgumentParser
from itertools import product
from pathlib import Path
from typing import Optional


def remove_non_yellow_solutions(solutions: set, yellow: str):
    yellows_only = set()
    yellow_groups = yellow.split(",")
    yellow_mapping = {group[0]: [int(char) for char in group[1:]] for group in yellow_groups}
    yellow_letters_only = [char for char in yellow if char.isalpha()]
    for solution in solutions:
        if len(set(solution) & set(yellow_letters_only)) == len(yellow_letters_only):
            # Basically, if the chars in yellow are also in solution:
            yellow_wrong_space = False
            for letter, space_list in yellow_mapping.items():
                if yellow_wrong_space:
                    break
                for space in space_list:
                    if letter == solution[space-1]:
                        yellow_wrong_space = True
                        break
            if not yellow_wrong_space:
                yellows_only.add(solution)

    return yellows_only


def get_solutions(
        string: str,
        chars_remaining: Optional[str] = None,
        yellow: Optional[str] = None
):
    if chars_remaining is None:
        chars_remaining = 'abcdefghijklmnopqrstuvwxyz'
    solutions = set()
    spaces_to_fill = len(list(filter(lambda x: x == '_', string)))
    filler_chars = product(chars_remaining, repeat=spaces_to_fill)
    # This is inefficient, and could be replaced with some dictionary graph
    for char_set in filler_chars:
        cur_word = string
        for i in range(spaces_to_fill):
            cur_word = cur_word.replace('_', char_set[i], 1)
        solutions.add(cur_word)
    if yellow is not None:
        solutions = remove_non_yellow_solutions(solutions, yellow)

    return solutions


def parse_and_validate_options(parser: ArgumentParser):
    args = parser.parse_args()
    string = args.string
    remaining = args.remaining
    yellow = args.yellow
    if len(string) != 5:
        raise Exception(f"The string should be exactly 5 characters long.")
    for char in string:
        if not char.isalpha() and not char == '_':
            raise Exception(f"The string passed for validation contains "
                            f"invalid characters. It should only contain "
                            f"letters and underscores.")
    if remaining is not None:
        for char in remaining:
            if not char.isalpha():
                raise Exception("The option --remaining should contain letters only.")
    if yellow is not None:
        for group in yellow.split(","):
            for i, char in enumerate(group):
                if i == 0:
                    if not char.isalpha():
                        raise Exception("The option --yellow should contain "
                                        "comma-separated values, starting with "
                                        "a letter, followed by one or more digits, "
                                        "less than 6. The first character in one or "
                                        "more strings doesn't start with a letter.")
                else:
                    if not char.isdigit() or int(char) > 5:
                        raise Exception("The option --yellow should contain "
                                        "comma-separated values, starting with "
                                        "a letter, followed by one or more digits, "
                                        "less than 6. The middle or last characters "
                                        "in one of the values isn't a digit less than "
                                        "6.")
    return yellow, remaining, string


def print_combos():
    parser = ArgumentParser()
    parser.add_argument(
        '-s',
        '--string',
        type=str,
        required=True,
        help='a 5-char string with letters and underscores only, representing '
             'correctly placed letters and unknown positions'
    )
    parser.add_argument(
        '-r',
        '--remaining',
        type=str,
        required=False,
        help='a string containing letters only, which may fill the empty, '
             'unknown spaces'
    )
    parser.add_argument(
        '-y',
        '--yellow',
        type=str,
        required=False,
        help='a comma-separated string. Each value is a letter & numbers representing '
             'the wrong position(s). This will filter out solutions that lack '
             'yellow letters, or with those letters in the wrong position(s). '
             'Example: y35,d2,e4'
    )
    yellow, remaining, string = parse_and_validate_options(parser)
    guess_path = Path(__file__).parent.absolute().joinpath('wordle-allowed-guesses.txt')
    with open(guess_path, 'r') as official_possibilities:
        official_possibilities = {line.replace('\n', '') for line in official_possibilities}

    calculated_solutions = get_solutions(string, chars_remaining=remaining, yellow=yellow)
    valid_solutions = official_possibilities & calculated_solutions
    print(f"There are {len(valid_solutions)} possible solutions:")
    for solution in valid_solutions:
        print(solution)


if __name__ == "__main__":
    print_combos()

# TODO it would be cool to print out something like this... all
# possible yellow positions with blanks:

# re_t_
# re__t
# _ert_
# _er_t
